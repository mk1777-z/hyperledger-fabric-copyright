package middle

import (
    "context"
    "hyperledger-fabric-copyright/conf"
    "net/http"
    "strings"

    "github.com/cloudwego/hertz/pkg/app"
    "github.com/cloudwego/hertz/pkg/common/utils"
    "github.com/dgrijalva/jwt-go"
)

// EnsureLoggedIn is a middleware to check if the user is authenticated.
// It extracts the JWT token from the Authorization header, validates it,
// and puts the user claims into the request context.
func EnsureLoggedIn() app.HandlerFunc {
    return func(ctx context.Context, c *app.RequestContext) {
        tokenStringHeader := c.GetHeader("Authorization")
        if string(tokenStringHeader) == "" {
            c.AbortWithStatusJSON(http.StatusUnauthorized, utils.H{"error": "Authorization token is missing"})
            return
        }

        // Extract Bearer token
        tokenString := strings.Replace(string(tokenStringHeader), "Bearer ", "", 1)
        if tokenString == "" {
            c.AbortWithStatusJSON(http.StatusUnauthorized, utils.H{"error": "Authorization token is missing or malformed"})
            return
        }

        // Parse token
        token, err := jwt.ParseWithClaims(tokenString, &conf.UserClaims{}, func(t *jwt.Token) (interface{}, error) {
            // Check the signing method
            if _, ok := t.Method.(*jwt.SigningMethodHMAC); !ok {
                return nil, jwt.NewValidationError("unexpected signing method", jwt.ValidationErrorSignatureInvalid)
            }
            return conf.Con.Jwtkey, nil
        })

        if err != nil {
            // Handle various token errors
            if ve, ok := err.(*jwt.ValidationError); ok {
                if ve.Errors&jwt.ValidationErrorMalformed != 0 {
                    c.AbortWithStatusJSON(http.StatusUnauthorized, utils.H{"error": "Malformed token"})
                } else if ve.Errors&(jwt.ValidationErrorExpired|jwt.ValidationErrorNotValidYet) != 0 {
                    c.AbortWithStatusJSON(http.StatusUnauthorized, utils.H{"error": "Token is either expired or not active yet"})
                } else {
                    c.AbortWithStatusJSON(http.StatusUnauthorized, utils.H{"error": "Couldn't handle this token: " + err.Error()})
                }
            } else {
                c.AbortWithStatusJSON(http.StatusUnauthorized, utils.H{"error": "Couldn't handle this token: " + err.Error()})
            }
            return
        }

        // Validate token claims
        claims, ok := token.Claims.(*conf.UserClaims)
        if !ok || !token.Valid {
            c.AbortWithStatusJSON(http.StatusUnauthorized, utils.H{"error": "Invalid token claims"})
            return
        }

        // Store user claims in context for downstream handlers
        c.Set("user", claims) // Key "user" can be used to retrieve claims later

        c.Next(ctx) // Proceed to the next handler
    }
}